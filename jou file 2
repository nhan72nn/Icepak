import os
import subprocess

# Define the journal file content
jou_content = """
# Icepak Journal File for Simple Block Setup
(load-project "new_project")
(create-block "block1" (dimensions 0.1 0.1 0.1) (position 0 0 0))
(set-material "block1" "Aluminum")
(assign-power "block1" 10) ; 10W heat source
(set-solution-settings (convergence-criteria 1e-6) (max-iterations 100))
(generate-mesh)
(solve)
(save-project "output_project")
"""

# Write the .jou file
with open("icepak_setup.jou", "w") as f:
    f.write(jou_content)

# Run Icepak in batch mode to execute the .jou file
icepak_path = r"C:\Program Files\AnsysEM\AnsysEM21.1\Win64\icepak.exe"  # Use raw string
jou_file = os.path.abspath("icepak_setup.jou")

# Use subprocess.run to execute the command
command = [icepak_path, "-batch", "-ng", "-jou", jou_file]
subprocess.run(command, check=True)





import os
import subprocess

# Get the directory of the Python script
script_dir = os.path.dirname(os.path.abspath(__file__))

# Define absolute paths for .tzr and .ipk files in the script's directory
tzr_file = os.path.join(script_dir, "pre_mesh_project.tzr")
ipk_file = os.path.join(script_dir, "output_project.ipk")
jou_file = os.path.join(script_dir, "icepak_setup.jou")

# Define the journal file content with absolute paths for packing and saving
jou_content = f"""
# Icepak Journal File for Simple Block Setup with Packing
(load-project "new_project")
(create-enclosure "enclosure1" (dimensions 0.5 0.5 0.5) (position -0.25 -0.25 -0.25))
(create-block "block1" (dimensions 0.1 0.1 0.1) (position 0 0 0))
(set-material "block1" "Aluminum")
(assign-power "block1" 10) ; 10W heat source

; Pack the project as a .tzr file before meshing
(pack-project "{tzr_file}")

; Set up meshing parameters
(set-meshing-params 
  (global-mesh-size 0.01) 
  (mesh-type "hex-dominant") 
  (min-elements-in-gap 3) 
  (max-size-ratio 2)
)
(initialize-mesh)
(generate-mesh)

; Set solution settings
(set-solution-settings 
  (convergence-criteria 1e-6) 
  (max-iterations 100)
  (flow-regime "laminar")
)
(solve)

; Save the final project
(save-project "{ipk_file}")
"""

# Write the .jou file in the script's directory
with open(jou_file, "w") as f:
    f.write(jou_content)

# Run Icepak in batch mode
icepak_path = r"C:\Program Files\AnsysEM\AnsysEM21.1\Win64\icepak.exe"  # Update to your Icepak path

# Use subprocess.run to execute the command
command = [icepak_path, "-batch", "-ng", "-jou", jou_file]
try:
    subprocess.run(command, check=True)
    print("Simulation completed successfully.")
    print(f"Project packed as '{tzr_file}'")
    print(f"Project saved as '{ipk_file}'")
except subprocess.CalledProcessError as e:
    print(f"Error running Icepak: {e}")
    print("Check the Icepak log file for details (e.g., icepak.log or output_project.log).")







import os
import subprocess

# --- Filenames ---
jou_name    = "simple_block.jou"
project_ipk = "simple_block_solved.ipk"

# --- Build the journal contents ---
jou_text = f"""
/file/new
/prep7
/unit,SI
;; Geometry: block 10×10×10 mm at origin
/geometry,block
10,10,10,0,0,0
/mesh/auto/volume
/mesh/generate
;; Material: aluminum from library
/define/material,aluminum
/material/list
;; Convection on all walls: h=10 W/m^2K, Tamb=300 K
/boundary/modify,*,convection-coeff,10
/boundary/modify,*,ambient-temperature,300
;; Solve
/solve/initialize/initialize-flow
/solve/iterate,100
;; Save project
/file/save-project,{project_ipk}
/exit
"""

# Write journal file
with open(jou_name, "w") as f:
    f.write(jou_text.strip())
print(f"[INFO] Journal written to '{jou_name}'")

# --- Batch invocation ---
# Use the Icepak .bat wrapper provided in 2024R2
icepak_bat = r"C:\Program Files\ANSYS Inc\v241\Icepak\bin\icepak24.2win64.bat"

cmd = [
    icepak_bat,
    "-BatchSolve", jou_name,   # run our journal
    "-BatchOptions", ""        # (optional extra flags)
]

print("[INFO] Launching Icepak in batch mode...")
result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

print("\n=== Icepak STDOUT ===")
print(result.stdout)
print("\n=== Icepak STDERR ===")
print(result.stderr)

# Check for output
if os.path.exists(project_ipk):
    print(f"[SUCCESS] Solved project saved to '{project_ipk}'")
else:
    print("[ERROR] Solved project not found—check logs above.")





import os
import subprocess
import sys
import threading

# Filenames
jou_name          = "simple_block.jou"
initial_trz       = "simple_block_initial.trz"
solved_ipk        = "simple_block_solved.ipk"
solved_trz        = "simple_block_solved.trz"
icepak_launcher   = r"C:\Program Files\ANSYS Inc\v241\Icepak\bin\icepak24.2win64.bat"

# 1) Write the updated journal file
jou_contents = """
/file/new
/file/pack,{initial_trz}

/prep7
/unit,SI

/geometry,block
10,10,10,0,0,0

/mesh/auto/volume
/mesh/generate

/define/material,aluminum
/material/list

/boundary/modify,*,convection-coeff,10
/boundary/modify,*,ambient-temperature,300

/solve/initialize/initialize-flow
/solve/iterate,100

/file/save-project,{solved_ipk}
/file/pack,{solved_trz}

/exit
""".strip().format(
    initial_trz=initial_trz,
    solved_ipk=solved_ipk,
    solved_trz=solved_trz
)

with open(jou_name, "w") as f:
    f.write(jou_contents)
print(f"[INFO] Written journal '{jou_name}'.")

# 2) Launch Icepak in batch mode on 4 cores, streaming output
cmd = [
    icepak_launcher,
    "-BatchSolve", jou_name,
    "-Distributed",
    "-machinelist", "list=localhost:1:4",
    "-monitor"
]

print("[INFO] Starting Icepak (4 cores, monitoring)...")
proc = subprocess.Popen(
    cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1
)

def stream(pipe):
    for line in iter(pipe.readline, ''):
        sys.stdout.write(line)
    pipe.close()

thread = threading.Thread(target=stream, args=(proc.stdout,))
thread.start()
proc.wait()
thread.join()

# 3) Check for outputs
for fn in (initial_trz, solved_ipk, solved_trz):
    status = "FOUND" if os.path.exists(fn) else "MISSING"
    print(f"[{status}] {fn}")
